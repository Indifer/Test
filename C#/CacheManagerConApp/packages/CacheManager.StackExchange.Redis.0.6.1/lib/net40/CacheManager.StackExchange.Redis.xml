<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CacheManager.StackExchange.Redis</name>
    </assembly>
    <members>
        <member name="T:CacheManager.Core.ConfigurationBuilderExtensions">
            <summary>
            Extensions for the configuration builder specific to the redis cache handle.
            </summary>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilderExtensions.WithRedisConfiguration(CacheManager.Core.ConfigurationBuilderCachePart,System.String,System.Action{CacheManager.Redis.RedisConfigurationBuilder})">
            <summary>
            Adds a redis configuration.
            </summary>
            <param name="part">The part.</param>
            <param name="configurationKey">
            The configuration key which has to match with the cache handle name.
            </param>
            <param name="config">The redis configuration object.</param>
            <returns>The configuration builder.</returns>
            <exception cref="T:System.ArgumentNullException">If config is null.</exception>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilderExtensions.WithRedisConfiguration(CacheManager.Core.ConfigurationBuilderCachePart,System.String,System.String)">
            <summary>
            Adds a redis configuration.
            </summary>
            <param name="part">The part.</param>
            <param name="configurationKey">
            The configuration key which has to match with the cache handle name.
            </param>
            <param name="connectionString">The redis connection string.</param>
            <returns>The configuration builder.</returns>
            <exception cref="T:System.ArgumentNullException">
            If configurationKey or connectionString are null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilderExtensions.WithRedisBackPlate(CacheManager.Core.ConfigurationBuilderCachePart,System.String)">
            <summary>
            Configures the back plate for the cache manager.
            <para>
            The <paramref name="redisConfigurationId"/> is used to define the redis configuration,
            the back plate should use to connect to the redis server.
            </para>
            <para>
            If a back plate is defined, at least one cache handle must be marked as back plate
            source. The cache manager then will try to synchronize multiple instances of the same configuration.
            </para>
            </summary>
            <param name="part">The part.</param>
            <param name="redisConfigurationId">
            The id of the configuration the back plate should use.
            </param>
            <returns>The builder instance.</returns>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilderExtensions.WithRedisCacheHandle(CacheManager.Core.ConfigurationBuilderCachePart,System.String)">
            <summary>
            Add a <see cref="T:CacheManager.Redis.RedisCacheHandle"/> with the required name.
            <para>
            This handle requires a redis configuration to be defined with the
            <paramref name="redisConfigurationId"/> matching the configuration's id.
            </para>
            </summary>
            <param name="part">The builder part.</param>
            <param name="redisConfigurationId">
            The redis configuration identifier will be used as name for the cache handle and to
            retrieve the connection configuration.
            </param>
            <returns>The part.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if handleName is null.</exception>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilderExtensions.WithRedisCacheHandle(CacheManager.Core.ConfigurationBuilderCachePart,System.String,System.Boolean)">
            <summary>
            Add a <see cref="T:CacheManager.Redis.RedisCacheHandle"/> with the required name.
            <para>
            This handle requires a redis configuration to be defined with the
            <paramref name="redisConfigurationId"/> matching the configuration's id.
            </para>
            </summary>
            <param name="part">The builder part.</param>
            <param name="redisConfigurationId">
            The redis configuration identifier will be used as name for the cache handle and to
            retrieve the connection configuration.
            </param>
            <param name="isBackPlateSource">
            Set this to true if this cache handle should be the source of the back plate.
            <para>This setting will be ignored if no back plate is configured.</para>
            </param>
            <returns>The part.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if handleName or handleType are null.
            </exception>
        </member>
        <member name="T:CacheManager.Redis.RedisCacheBackPlate">
            <summary>
            Implementation of the cache back plate with Redis Pub/Sub feature.
            <para>
            Pub/Sub is used to send messages to the redis server on any Update, cache Clear, Region
            Clear or Remove operation. Every cache manager with the same configuration subscribes to the
            same chanel and can react on those messages to keep other cache handles in sync with the 'master'.
            </para>
            </summary>
        </member>
        <member name="M:CacheManager.Redis.RedisCacheBackPlate.#ctor(CacheManager.Core.CacheManagerConfiguration,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Redis.RedisCacheBackPlate"/> class.
            </summary>
            <param name="configuration">The cache manager configuration.</param>
            <param name="cacheName">The cache name.</param>
        </member>
        <member name="M:CacheManager.Redis.RedisCacheBackPlate.NotifyChange(System.String)">
            <summary>
            Notifies other cache clients about a changed cache key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:CacheManager.Redis.RedisCacheBackPlate.NotifyChange(System.String,System.String)">
            <summary>
            Notifies other cache clients about a changed cache key.
            </summary>
            <param name="key">The key.</param>
            <param name="region">The region.</param>
        </member>
        <member name="M:CacheManager.Redis.RedisCacheBackPlate.NotifyClear">
            <summary>
            Notifies other cache clients about a cache clear.
            </summary>
        </member>
        <member name="M:CacheManager.Redis.RedisCacheBackPlate.NotifyClearRegion(System.String)">
            <summary>
            Notifies other cache clients about a cache clear region call.
            </summary>
            <param name="region">The region.</param>
        </member>
        <member name="M:CacheManager.Redis.RedisCacheBackPlate.NotifyRemove(System.String)">
            <summary>
            Notifies other cache clients about a removed cache key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:CacheManager.Redis.RedisCacheBackPlate.NotifyRemove(System.String,System.String)">
            <summary>
            Notifies other cache clients about a removed cache key.
            </summary>
            <param name="key">The key.</param>
            <param name="region">The region.</param>
        </member>
        <member name="M:CacheManager.Redis.RedisCacheBackPlate.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="managed">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release
            only unmanaged resources.
            </param>
        </member>
        <member name="T:CacheManager.Redis.RedisCacheHandle">
            <summary>
            Cache handle implementation for Redis.
            </summary>
        </member>
        <member name="M:CacheManager.Redis.RedisCacheHandle.#ctor(CacheManager.Core.ICacheManager{System.Object},CacheManager.Core.CacheHandleConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Redis.RedisCacheHandle"/> class.
            </summary>
            <param name="manager">The manager.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="T:CacheManager.Redis.RedisCacheHandle`1">
            <summary>
            Cache handle implementation for Redis.
            </summary>
            <typeparam name="TCacheValue">The type of the cache value.</typeparam>
        </member>
        <member name="M:CacheManager.Redis.RedisCacheHandle`1.#ctor(CacheManager.Core.ICacheManager{`0},CacheManager.Core.CacheHandleConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Redis.RedisCacheHandle`1"/> class.
            </summary>
            <param name="manager">The manager.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="P:CacheManager.Redis.RedisCacheHandle`1.Count">
            <summary>
            Gets the number of items the cache handle currently maintains.
            </summary>
            <value>The count.</value>
            <exception cref="T:System.InvalidOperationException">No active master found.</exception>
        </member>
        <member name="M:CacheManager.Redis.RedisCacheHandle`1.Clear">
            <summary>
            Clears this cache, removing all items in the base cache and all regions.
            </summary>
        </member>
        <member name="M:CacheManager.Redis.RedisCacheHandle`1.ClearRegion(System.String)">
            <summary>
            Clears the cache region, removing all items from the specified <paramref name="region"/> only.
            </summary>
            <param name="region">The cache region.</param>
        </member>
        <member name="M:CacheManager.Redis.RedisCacheHandle`1.GetServers(StackExchange.Redis.ConnectionMultiplexer)">
            <summary>
            Gets the servers.
            </summary>
            <param name="muxer">The muxer.</param>
            <returns>The list of servers.</returns>
        </member>
        <member name="M:CacheManager.Redis.RedisCacheHandle`1.Update(System.String,System.Func{`0,`0},CacheManager.Core.UpdateItemConfig)">
            <summary>
            Updates an existing key in the cache.
            <para>
            The cache manager will make sure the update will always happen on the most recent version.
            </para>
            <para>
            If version conflicts occur, if for example multiple cache clients try to write the same
            key, and during the update process, someone else changed the value for the key, the
            cache manager will retry the operation.
            </para>
            <para>
            The <paramref name="updateValue"/> function will get invoked on each retry with the most
            recent value which is stored in cache.
            </para>
            </summary>
            <param name="key">The key to update.</param>
            <param name="updateValue">The function to perform the update.</param>
            <param name="config">The cache configuration used to specify the update behavior.</param>
            <returns>The update result which is interpreted by the cache manager.</returns>
            <remarks>
            If the cache does not use a distributed cache system. Update is doing exactly the same
            as Get plus Put.
            </remarks>
        </member>
        <member name="M:CacheManager.Redis.RedisCacheHandle`1.Update(System.String,System.String,System.Func{`0,`0},CacheManager.Core.UpdateItemConfig)">
            <summary>
            Updates an existing key in the cache.
            <para>
            The cache manager will make sure the update will always happen on the most recent version.
            </para>
            <para>
            If version conflicts occur, if for example multiple cache clients try to write the same
            key, and during the update process, someone else changed the value for the key, the
            cache manager will retry the operation.
            </para>
            <para>
            The <paramref name="updateValue"/> function will get invoked on each retry with the most
            recent value which is stored in cache.
            </para>
            </summary>
            <param name="key">The key to update.</param>
            <param name="region">The cache region.</param>
            <param name="updateValue">The function to perform the update.</param>
            <param name="config">The cache configuration used to specify the update behavior.</param>
            <returns>The update result which is interpreted by the cache manager.</returns>
            <remarks>
            If the cache does not use a distributed cache system. Update is doing exactly the same
            as Get plus Put.
            </remarks>
        </member>
        <member name="M:CacheManager.Redis.RedisCacheHandle`1.AddInternalPrepared(CacheManager.Core.CacheItem{`0})">
            <summary>
            Adds a value to the cache.
            <para>
            Add call is synced, so might be slower than put which is fire and forget but we want to
            return true|false if the operation was successfully or not. And always returning true
            could be misleading if the item already exists
            </para>
            </summary>
            <param name="item">The <c>CacheItem</c> to be added to the cache.</param>
            <returns>
            <c>true</c> if the key was not already added to the cache, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:CacheManager.Redis.RedisCacheHandle`1.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
            <param name="disposeManaged">Indicator if managed resources should be released.</param>
        </member>
        <member name="M:CacheManager.Redis.RedisCacheHandle`1.GetCacheItemInternal(System.String)">
            <summary>
            Gets a <c>CacheItem</c> for the specified key.
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <returns>The <c>CacheItem</c>.</returns>
        </member>
        <member name="M:CacheManager.Redis.RedisCacheHandle`1.GetCacheItemInternal(System.String,System.String)">
            <summary>
            Gets a <c>CacheItem</c> for the specified key.
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <param name="region">The cache region.</param>
            <returns>The <c>CacheItem</c>.</returns>
        </member>
        <member name="M:CacheManager.Redis.RedisCacheHandle`1.PutInternal(CacheManager.Core.CacheItem{`0})">
            <summary>
            Puts the <paramref name="item"/> into the cache. If the item exists it will get updated
            with the new value. If the item doesn't exist, the item will be added to the cache.
            </summary>
            <param name="item">The <c>CacheItem</c> to be added to the cache.</param>
        </member>
        <member name="M:CacheManager.Redis.RedisCacheHandle`1.PutInternalPrepared(CacheManager.Core.CacheItem{`0})">
            <summary>
            Puts the <paramref name="item"/> into the cache. If the item exists it will get updated
            with the new value. If the item doesn't exist, the item will be added to the cache.
            </summary>
            <param name="item">The <c>CacheItem</c> to be added to the cache.</param>
        </member>
        <member name="M:CacheManager.Redis.RedisCacheHandle`1.RemoveInternal(System.String)">
            <summary>
            Removes a value from the cache for the specified key.
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <returns>
            <c>true</c> if the key was found and removed from the cache, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:CacheManager.Redis.RedisCacheHandle`1.RemoveInternal(System.String,System.String)">
            <summary>
            Removes a value from the cache for the specified key.
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <param name="region">The cache region.</param>
            <returns>
            <c>true</c> if the key was found and removed from the cache, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:CacheManager.Redis.RedisConfiguration">
            <summary>
            <see cref="T:CacheManager.Redis.RedisConfiguration"/> will be used for configuring e.g. StackExchange.Redis by
            code or configuration file.
            <para>
            The element was added only because StackExchange.Redis doesn't support configuration via web/app.config
            </para>
            </summary>    
        </member>
        <member name="M:CacheManager.Redis.RedisConfiguration.#ctor(System.String,System.Collections.Generic.IList{CacheManager.Redis.ServerEndPoint},System.Int32,System.String,System.Boolean,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Redis.RedisConfiguration"/> class.
            </summary>
            <param name="key">
            The configuration key which will be used by the cache handle to find a configuration for
            the cache handle's name.
            </param>
            <param name="endpoints">
            The list of <see cref="T:CacheManager.Redis.ServerEndPoint"/> s to be used to connect to Redis server.
            </param>
            <param name="database">The Redis database index.</param>
            <param name="password">The password of the Redis server.</param>
            <param name="isSsl">If <c>true</c> instructs the cache to use SSL encryption.</param>
            <param name="sslHost">If specified, the connection will set the SSL host.</param>
            <param name="connectionTimeout">Sets the timeout used for connect operations.</param>
            <param name="allowAdmin">
            If set to <c>True</c> it enables the cache to use features which might be risky.
            <c>Clear</c> for example.
            </param>
        </member>
        <member name="M:CacheManager.Redis.RedisConfiguration.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Redis.RedisConfiguration"/> class.
            </summary>
            <param name="key">
            The configuration key which will be used by the cache handle to find a configuration for
            the cache handle's name.
            </param>
            <param name="connectionString">
            Instead of specifying all the properties, this can also be done via one connection string.
            </param>
        </member>
        <member name="P:CacheManager.Redis.RedisConfiguration.Key">
            <summary>
            Gets the identifier for the redis configuration.
            <para>
            This might have to match with the cache handle's name to make the cache handle use this configuration.
            </para>
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:CacheManager.Redis.RedisConfiguration.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
            <value>
            The connection string.
            </value>
        </member>
        <member name="P:CacheManager.Redis.RedisConfiguration.Password">
            <summary>
            Gets the password to be used to connect to the Redis server.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="P:CacheManager.Redis.RedisConfiguration.IsSsl">
            <summary>
            Gets a value indicating whether to use SSL encryption.
            </summary>
            <value>
              <c>true</c> if this instance is SSL; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CacheManager.Redis.RedisConfiguration.SslHost">
            <summary>
            Gets the SSL Host.
            If set, it will enforce this particular host on the server's certificate.
            </summary>
            <value>
            The SSL host.
            </value>
        </member>
        <member name="P:CacheManager.Redis.RedisConfiguration.ConnectionTimeout">
            <summary>
            Gets the timeout for any connect operations.
            </summary>
            <value>
            The connection timeout.
            </value>
        </member>
        <member name="P:CacheManager.Redis.RedisConfiguration.Endpoints">
            <summary>
            Gets the list of endpoints to be used to connect to the Redis server.
            </summary>
            <value>
            The endpoints.
            </value>
        </member>
        <member name="P:CacheManager.Redis.RedisConfiguration.AllowAdmin">
            <summary>
            Gets a value indicating whether to allow the connection to run certain 'risky' commands, or not.
            <para><c>cache.Clear</c> requires this to be set to true because we will flush the Redis database.
            </para>
            </summary>
            <value>
              <c>true</c> if 'risky' commands are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CacheManager.Redis.RedisConfiguration.Database">
            <summary>
            Gets the Redis database index the cache will use.
            </summary>
            <value>
            The database.
            </value>
        </member>
        <member name="T:CacheManager.Redis.ServerEndPoint">
            <summary>
            Defines an endpoint.
            </summary>
        </member>
        <member name="M:CacheManager.Redis.ServerEndPoint.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Redis.ServerEndPoint"/> class.
            </summary>
            <param name="host">The host.</param>
            <param name="port">The port.</param>
            <exception cref="T:System.ArgumentNullException">If host is null.</exception>
        </member>
        <member name="P:CacheManager.Redis.ServerEndPoint.Port">
            <summary>
            Gets the port.
            </summary>
            <value>The port.</value>
        </member>
        <member name="P:CacheManager.Redis.ServerEndPoint.Host">
            <summary>
            Gets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="T:CacheManager.Redis.RedisConfigurationBuilder">
            <summary>
            <see cref="T:CacheManager.Redis.RedisConfigurationBuilder"/> helps creating the <see cref="T:CacheManager.Redis.RedisConfiguration"/>
            object via code.
            </summary>
        </member>
        <member name="M:CacheManager.Redis.RedisConfigurationBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Redis.RedisConfigurationBuilder"/> class.
            </summary>
            <param name="configurationKey">The configuration key.</param>
            <exception cref="T:System.ArgumentNullException">If configurationKey is null.</exception>
        </member>
        <member name="M:CacheManager.Redis.RedisConfigurationBuilder.Build">
            <summary>
            Creates the <see cref="T:CacheManager.Redis.RedisConfiguration"/> out of the currently specified properties,
            if possible.
            </summary>
            <returns>The <c>RedisConfiguration</c></returns>
        </member>
        <member name="M:CacheManager.Redis.RedisConfigurationBuilder.WithAllowAdmin">
            <summary>
            If set to true, commands which might be risky are enabled, like Clear which will delete
            all entries in the redis database.
            </summary>
            <returns>The builder.</returns>
        </member>
        <member name="M:CacheManager.Redis.RedisConfigurationBuilder.WithConnectionTimeout(System.Int32)">
            <summary>
            Sets the timeout in milliseconds for connect operations.
            </summary>
            <param name="timeout">The timeout in milliseconds.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:CacheManager.Redis.RedisConfigurationBuilder.WithDatabase(System.Int32)">
            <summary>
            Sets the database.
            <para>Maximum number of database depends on the redis server configuration.</para>Default
            is <c>0</c>.
            </summary>
            <param name="databaseIndex">The database index.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:CacheManager.Redis.RedisConfigurationBuilder.WithEndpoint(System.String,System.Int32)">
            <summary>
            Adds an endpoint to the connection configuration.
            <para>Call this multiple times to add multiple endpoints.</para>
            </summary>
            <param name="host">The host or IP of the redis server.</param>
            <param name="port">The port of the redis server.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:CacheManager.Redis.RedisConfigurationBuilder.WithPassword(System.String)">
            <summary>
            Sets the password for the redis server.
            </summary>
            <param name="serverPassword">The redis server password.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:CacheManager.Redis.RedisConfigurationBuilder.WithSsl(System.String)">
            <summary>
            Enables SSL encryption.
            <para>
            If host is specified it will enforce a particular SSL host identity on the server's certificate.
            </para>
            </summary>
            <param name="host">The SSL host.</param>
            <returns>The builder.</returns>
        </member>
        <member name="T:CacheManager.Redis.RedisConfigurations">
            <summary>
            Manages redis client configurations for the cache handle.
            <para>
            Configurations will be added by the cache configuration builder/factory or the configuration
            loader. The cache handle will pick up the configuration matching the handle's name.
            </para>
            </summary>
        </member>
        <member name="M:CacheManager.Redis.RedisConfigurations.AddConfiguration(CacheManager.Redis.RedisConfiguration)">
            <summary>
            Adds the configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <exception cref="T:System.ArgumentNullException">If configuration is null.</exception>
        </member>
        <member name="M:CacheManager.Redis.RedisConfigurations.GetConfiguration(System.String)">
            <summary>
            Gets the configuration.
            </summary>
            <param name="configurationName">The identifier.</param>
            <returns>The <c>RedisConfiguration</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If id is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            If no configuration was added for the id.
            </exception>
        </member>
        <member name="M:CacheManager.Redis.RedisConfigurations.LoadConfiguration(System.String,System.String)">
            <summary>
            Loads the configuration.
            </summary>
            <param name="configFileName">Name of the configuration file.</param>
            <param name="sectionName">Name of the section.</param>
            <exception cref="T:System.ArgumentNullException">
            If configFileName or sectionName are null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If the configuration file could not be found.
            </exception>
        </member>
        <member name="M:CacheManager.Redis.RedisConfigurations.LoadConfiguration(CacheManager.Redis.RedisConfigurationSection)">
            <summary>
            Loads the configuration.
            </summary>
            <param name="section">The section.</param>
            <exception cref="T:System.ArgumentNullException">If section is null.</exception>
        </member>
        <member name="M:CacheManager.Redis.RedisConfigurations.LoadConfiguration(System.String)">
            <summary>
            Loads the configuration.
            </summary>
            <param name="sectionName">Name of the section.</param>
            <exception cref="T:System.ArgumentNullException">If sectionName is null.</exception>
        </member>
        <member name="M:CacheManager.Redis.RedisConfigurations.LoadConfiguration">
            <summary>
            Loads the configuration from the default section name 'cacheManager.Redis'.
            </summary>
        </member>
        <member name="T:CacheManager.Redis.Endpoint">
            <summary>
            Configuration section for the CacheManager.
            </summary>
            <example><![CDATA[
            <cacheManager.redis>
              <connections>
               <connection id="redis1"
                               database="0"
                               { connnectionString="redis0:6379,redis1:6380,keepAlive=180,allowAdmin=true" }
                               OR
                               {
                               allowAdmin="true|false"
                               password=""
                               ssl="true|false"
                               sslHost="string"
                               connectionTimeout="ms"
                               }
                       >
                   <endpoints>
                       <endpoint host="127.0.0.1" port="6379" />
                       <endpoint host="127.0.0.1" port="6380"/>
                   </endpoints>
               </connection>
               <connection id="redisN">...</connection>
             <connections/>
            </cacheManager.redis>
            ]]>
            </example>
        </member>
        <member name="P:CacheManager.Redis.Endpoint.Host">
            <summary>
            Gets or sets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="P:CacheManager.Redis.Endpoint.Port">
            <summary>
            Gets or sets the port.
            </summary>
            <value>The port.</value>
        </member>
        <member name="T:CacheManager.Redis.EndpointCollection">
            <summary>
            Collection of end point configurations.
            </summary>
        </member>
        <member name="M:CacheManager.Redis.EndpointCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Redis.EndpointCollection"/> class.
            </summary>
        </member>
        <member name="M:CacheManager.Redis.EndpointCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate
            through the collection.
            </returns>
        </member>
        <member name="M:CacheManager.Redis.EndpointCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>A new <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="M:CacheManager.Redis.EndpointCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">
            The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="T:CacheManager.Redis.RedisConfigurationSection">
            <summary>
            The main section for redis configurations.
            </summary>
        </member>
        <member name="F:CacheManager.Redis.RedisConfigurationSection.DefaultSectionName">
            <summary>
            The default section name.
            </summary>
        </member>
        <member name="P:CacheManager.Redis.RedisConfigurationSection.Connections">
            <summary>
            Gets the connections.
            </summary>
            <value>The connections.</value>
        </member>
        <member name="P:CacheManager.Redis.RedisConfigurationSection.Xmlns">
            <summary>
            Gets or sets the XMLNS.
            </summary>
            <value>The XMLNS.</value>
        </member>
        <member name="T:CacheManager.Redis.RedisOptionCollection">
            <summary>
            Collection of redis configurations.
            </summary>
        </member>
        <member name="M:CacheManager.Redis.RedisOptionCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Redis.RedisOptionCollection"/> class.
            </summary>
        </member>
        <member name="M:CacheManager.Redis.RedisOptionCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate
            through the collection.
            </returns>
        </member>
        <member name="M:CacheManager.Redis.RedisOptionCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>A new <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="M:CacheManager.Redis.RedisOptionCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">
            The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="T:CacheManager.Redis.RedisOptions">
            <summary>
            The redis configuration element.
            </summary>
        </member>
        <member name="P:CacheManager.Redis.RedisOptions.AllowAdmin">
            <summary>
            Gets or sets a value indicating whether advanced commands are allowed.
            </summary>
            <value><c>true</c> if admin commands should be allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CacheManager.Redis.RedisOptions.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:CacheManager.Redis.RedisOptions.ConnectionTimeout">
            <summary>
            Gets or sets the connection timeout.
            </summary>
            <value>The connection timeout.</value>
        </member>
        <member name="P:CacheManager.Redis.RedisOptions.Database">
            <summary>
            Gets or sets the database.
            </summary>
            <value>The database.</value>
        </member>
        <member name="P:CacheManager.Redis.RedisOptions.Endpoints">
            <summary>
            Gets the endpoints.
            </summary>
            <value>The endpoints.</value>
        </member>
        <member name="P:CacheManager.Redis.RedisOptions.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:CacheManager.Redis.RedisOptions.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:CacheManager.Redis.RedisOptions.Ssl">
            <summary>
            Gets or sets a value indicating whether SSL should be enabled or not.
            </summary>
            <value><c>true</c> if SSL should be enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CacheManager.Redis.RedisOptions.SslHost">
            <summary>
            Gets or sets the SSL host.
            </summary>
            <value>The SSL host.</value>
        </member>
    </members>
</doc>
