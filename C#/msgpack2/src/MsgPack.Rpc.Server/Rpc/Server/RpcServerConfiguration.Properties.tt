<#
//
// MessagePack for CLI
//
// Copyright (C) 2010 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file="..\..\..\Configuration.ttinclude" #>
<#@ assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#
// This file defines RpcServerConfiguration which is chunk of boilerplate.
var __properties =
new List<Property>()
{
	new Property()
	{
		Name = "PreferIPv4",
		Type = "bool",
		Default = "false",
		Summary = "Gets or sets whether use IP v4 even when IP v6 is supported.",
		Value = "<c>true</c>, use IP v4 anyway; otherwise, <c>false</c>. " +
			"The default is <c>false</c>.",
	},
	new Property()
	{
		Name = "MinimumConnection",
		Type = "int",
		Default = "2",
		Summary = "Gets or sets the minimum connection to be pool for newly inbound connection.",
		Value = "The minimum connection to be pool for newly inbound connection. " +
			"The default is 2.",
		Precondition = Constraints.NotNegative,
		Postcondition = Constraints.NotNegative
	},
	new Property()
	{
		Name = "MaximumConnection",
		Type = "int",
		Default = "100",
		Summary = "Gets or sets the maximum connection to be handle inbound connection.",
		Value = "The minimum connection to be handle inbound connection. " +
			"The default is 100.",
		Precondition = Constraints.OnlyPositive,
		Postcondition = Constraints.OnlyPositive
	},
	new Property()
	{
		Name = "MinimumConcurrentRequest",
		Type = "int",
		Default = "2",
		Summary = "Gets or sets the minimum concurrency for the each clients.",
		Value = "The minimum concurrency for the each clients. " +
			"The default is 2.",
		Precondition = Constraints.NotNegative,
		Postcondition = Constraints.NotNegative
	},
	new Property()
	{
		Name = "MaximumConcurrentRequest",
		Type = "int",
		Default = "10",
		Summary = "Gets or sets the maximum concurrency for the each clients.",
		Value = "The maximum concurrency for the each clients. " +
			"The default is 10.",
		Precondition = Constraints.OnlyPositive,
		Postcondition = Constraints.OnlyPositive
	},
	new Property()
	{
		Name = "BindingEndPoint",
		Type = "EndPoint",
		Default = "null",
		Summary = "Gets or sets the local end point to be bound.",
		Value = "The local end point to be bound. " +
			"The default is <c>null</c>. The server will select appropriate version IP and bind to it with port 0.",
		Precondition = Constraints.NotNull,
		Postcondition = Constraints.NotNull
	},
	new Property()
	{
		Name = "ListenBackLog",
		Type = "int",
		Default = "100",
		Summary = "Gets or sets the listen back log of each sockets.",
		Value = "The listen back log of each sockets. " +
			"The default is 100.",
		Precondition = Constraints.NotNegative,
		Postcondition = Constraints.NotNegative
	},
	new Property()
	{
		Name = "SendTimeout",
		Type = "TimeSpan?",
		Default = "TimeSpan.FromSeconds( 20 )",
		Summary = "Gets or sets the timeout value to send all response packets.",
		Value = "The timeout value to send all response packets.. " +
			"The default is 20 seconds. <c>null</c> means inifinite timeout.",
		Precondition = Constraints.NullOrPositive,
		Postcondition = Constraints.NullOrPositive,
		Remarks =
			new String[]
			{
				"Send timeout is timeout between when the first packet of the session is sent and when entire message is sent.",
				"If this timeout is exceeded, the connection will be closed because a server cannot send error when there are any problems on sending.",
				"This timeout try to protect server resources from the client which occupies connection regardless whether it is arbitrary or not."
			}
	},
	new Property()
	{
		Name = "ReceiveTimeout",
		Type = "TimeSpan?",
		Default = "TimeSpan.FromSeconds( 20 )",
		Summary = "Gets or sets the timeout value to receive all request/notification packets.",
		Value = "The timeout value to receive all request/notification packets. " +
			"The default is 20 seconds. <c>null</c> means inifinite timeout.",
		Precondition = Constraints.NullOrPositive,
		Postcondition = Constraints.NullOrPositive,
		Remarks =
			new String[]
			{
				"Receive timeout is timeout between when the first packet of the session is arrived and when the deserialization of the single message is finished.",
				"If this timeout is exceeded, the <see cref=\"RpcError.TimeoutError\" /> will be returned to the client if the message ID known, and then the connection will be closed.",
				"This timeout try to protect server resources from the client which occupies connection regardless whether it is arbitrary or not."
			}
	},
	new Property()
	{
		Name = "ExecutionTimeout",
		Type = "TimeSpan?",
		Default = "TimeSpan.FromSeconds( 110 )",
		Summary = "Gets or sets the timeout value to execute server thread.",
		Value = "The timeout value to execute server thread. " +
			"The default is 110 seconds. <c>null</c> means inifinite timeout.",
		Precondition = Constraints.NullOrPositive,
		Postcondition = Constraints.NullOrPositive,
		Remarks =
			new String[]
			{
				"If execution timeout occurres, <see cref=\"RpcApplicationContext.IsCanceled\" /> to be <c>true</c>, and then the <see cref=\"RpcError.TimeoutError\" /> will be returned to the client.",
				"This timeout achieves graceful timeout for the operation which takes indefinitive time."
			}
	},
	new Property()
	{
		Name = "HardExecutionTimeout",
		Type = "TimeSpan?",
		Default = "TimeSpan.FromSeconds( 20 )",
		Summary = "Gets or sets the timeout value to abort execution thread after execution timeout is occurred.",
		Value = "The timeout value to abort execution thread after execution timeout is occurred. " +
			"The default is 20 seconds. <c>null</c> means inifinite timeout.",
		Precondition = Constraints.NullOrPositive,
		Postcondition = Constraints.NullOrPositive,
		Remarks =
			new String[]
			{
				"Hard execution timeout is occurred when the time is elapsed from execution timeout.",
				"If hard execution timeout occurres, the application thread will be aborted, and then the <see cref=\"RpcError.TimeoutError\" /> will be returned to the client.",
				"This timeout protects server resources from consumption such as infinite loop.",
				"If the application does not recover from thread abortion, disable this feature by specifying <c>null</c>."
			}
	},
	new Property()
	{
		Name = "UdpListenerThreadExitTimeout",
		Type = "TimeSpan?",
		Default = "TimeSpan.FromMilliseconds( 300 )",
		Summary = "Gets or sets the timeout value to exit the listener thread of UDP server manager.",
		Value = "The timeout value to exit the listener thread of UDP server manager. " +
			"The default is 300 milliseconds. <c>null</c> means inifinite timeout.",
		Precondition = Constraints.NullOrNotNegative,
		Postcondition = Constraints.NullOrNotNegative,
	},
	new Property()
	{
		Name = "TransportManagerProvider",
		Type = "Func<RpcServer, ServerTransportManager>",
		Default = "( server ) => new TcpServerTransportManager( server )",
		Summary = "Gets or sets the factory function which creates new <see cref=\"ServerTransportManager\" />.",
		Value = "The factory function which creates new <see cref=\"ServerTransportManager\" />. " +
			"The default is the delegate which creates <see cref=\"TcpServerTransportManager\" /> instance.",
		Precondition = Constraints.NotNull,
		Postcondition = Constraints.NotNull
	},
	new Property()
	{
		Name = "DispatcherProvider",
		Type = "Func<RpcServer, Dispatcher>",
		Default = "( server ) => new LocatorBasedDispatcher( server )",
		Summary = "Gets or sets the factory function which creates new <see cref=\"Dispatcher\" />.",
		Value = "The factory function which creates new <see cref=\"Dispatcher\" />. " +
			"The default is the delegate which creates <see cref=\"LocatorBasedDispatcher\" /> instance.",
		Precondition = Constraints.NotNull,
		Postcondition = Constraints.NotNull
	},
	new Property()
	{
		Name = "ServiceTypeLocatorProvider",
		Type = "Func<RpcServerConfiguration, ServiceTypeLocator>",
		Default = "( config ) => new DefaultServiceTypeLocator()",
		Summary = "Gets or sets the factory function which creates new <see cref=\"ServiceTypeLocator\" />.",
		Value = "The factory function which creates new <see cref=\"ServiceTypeLocator\" />. " +
			"The default is the delegate which creates <see cref=\"DefaultServiceTypeLocator\" /> instance.",
		Precondition = Constraints.NotNull,
		Postcondition = Constraints.NotNull
	},
	new Property()
	{
		Name = "UseFullMethodName",
		Type = "bool",
		Default = "true",
		Summary = "Gets or sets whether the RPC method name can contain a scope and a version.",
		Value = "<c>true</c>, the RPC method name can contain a scope and a version; otherwise, <c>false</c>. " +
			"The default is <c>true</c>.",
		Remarks =
			new String[]
			{
				"If this value is enabled, the format \"&lt;method&gt;:&lt;scope&gt;:&lt;version&gt;\" can be used."
			}
	},
	new Property()
	{
		Name = "InitialReceiveBufferLength",
		Type = "int",
		Default = "65536",
		Summary = "Gets or sets the initial buffer size to receive packets.",
		Value = "The initial buffer size to receive packets. " +
			"The default is <c>65536</c>."
	},
	new Property()
	{
		Name = "InitialArgumentsBufferLength",
		Type = "int",
		Default = "65536",
		Summary = "Gets or sets the initial buffer size to unpack arguments.",
		Value = "The initial buffer size to unpack arguments. " +
			"The default is <c>65536</c>."
	},
	new Property()
	{
		Name = "InitialErrorBufferLength",
		Type = "int",
		Default = "128",
		Summary = "Gets or sets the initial buffer size to pack error.",
		Value = "The initial buffer size to pack error. " +
			"The default is <c>128</c>."
	},
	new Property()
	{
		Name = "InitialReturnValueBufferLength",
		Type = "int",
		Default = "65536",
		Summary = "Gets or sets the initial buffer size to pack return values.",
		Value = "The initial buffer size to pack return values. " +
			"The default is <c>65536</c>."
	},
	new Property()
	{
		Name = "IsDebugMode",
		Type = "bool",
		Default = "false",
		Summary = "Gets or sets whether the server is in debug mode.",
		Value = "<c>true</c>, the server is in debug mode; otherwise, <c>false</c>. " +
			"The default is <c>false</c>.",
		Remarks =
			new String[]
			{
				"When the server is in debug mode, the error message contains debugging information includes underlying exception string."
			}
	},
};

Func<string, string, Property> __objectPoolProviderPropertyFactory =
	( string name, string poolee ) =>
		new Property()
		{
			Name = name,
			Type = "Func<Func<" + poolee + ">, ObjectPoolConfiguration, ObjectPool<" + poolee + ">>",
			Default = "( factory, configuration ) => new StandardObjectPool<" + poolee + ">( factory, configuration )",
			Summary = "Gets or sets the factory function which creates new <see cref=\"ObjectPool{T}\" /> of " +
				"<see cref=\""+ poolee + "\" />.",
			Value = "The factory function which creates new <see cref=\"ObjectPool{T}\" /> of " +
				"<see cref=\""+ poolee + "\" />. " +
				"The default is the delegate which creates <see cref=\"StandardObjectPool{T}\" /> instance with <c>null</c> configuration.",
			Precondition = Constraints.NotNull,
			Postcondition = Constraints.NotNull
		};

__properties.Add( 
	__objectPoolProviderPropertyFactory(
		"RequestContextPoolProvider",
		"ServerRequestContext"
	)
);
__properties.Add( 
	__objectPoolProviderPropertyFactory(
		"ResponseContextPoolProvider",
		"ServerResponseContext"
	)
);
__properties.Add( 
	__objectPoolProviderPropertyFactory(
		"ApplicationContextPoolProvider",
		"RpcApplicationContext"
	)
);
__properties.Add( 
	__objectPoolProviderPropertyFactory(
		"ListeningContextPoolProvider",
		"ListeningContext"
	)
);
__properties.Add( 
	__objectPoolProviderPropertyFactory(
		"TcpTransportPoolProvider",
		"TcpServerTransport"
	)
);
__properties.Add( 
	__objectPoolProviderPropertyFactory(
		"UdpTransportPoolProvider",
		"UdpServerTransport"
	)
);
#>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

using System;
using System.Diagnostics.Contracts;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Text;
using MsgPack.Rpc.Server.Dispatch;
using MsgPack.Rpc.Server.Protocols;
<#=  Generate( "MsgPack.Rpc.Server", "RpcServerConfiguration", __properties.ToArray() ) #>